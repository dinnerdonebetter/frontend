// Code generated by gen_typescript. DO NOT EDIT.

import { ValidInstrument } from './validInstruments';

export interface IRecipeStepInstrument {
  createdAt: NonNullable<string>;
  instrument?: ValidInstrument;
  lastUpdatedAt?: string;
  recipeStepProductID?: string;
  archivedAt?: string;
  notes: NonNullable<string>;
  name: NonNullable<string>;
  belongsToRecipeStep: NonNullable<string>;
  id: NonNullable<string>;
  minimumQuantity: NonNullable<number>;
  maximumQuantity: NonNullable<number>;
  optionIndex: NonNullable<number>;
  productOfRecipeStep: NonNullable<boolean>;
  preferenceRank: NonNullable<number>;
  optional: NonNullable<boolean>;
}

export class RecipeStepInstrument implements IRecipeStepInstrument {
  createdAt: NonNullable<string> = '1970-01-01T00:00:00Z';
  instrument?: ValidInstrument = new ValidInstrument();
  lastUpdatedAt?: string;
  recipeStepProductID?: string;
  archivedAt?: string;
  notes: NonNullable<string> = '';
  name: NonNullable<string> = '';
  belongsToRecipeStep: NonNullable<string> = '';
  id: NonNullable<string> = '';
  minimumQuantity: NonNullable<number> = -1;
  maximumQuantity: NonNullable<number> = -1;
  optionIndex: NonNullable<number> = -1;
  productOfRecipeStep: NonNullable<boolean> = false;
  preferenceRank: NonNullable<number> = -1;
  optional: NonNullable<boolean> = false;

  constructor(
    input: {
      createdAt?: string;
      instrument?: ValidInstrument;
      lastUpdatedAt?: string;
      recipeStepProductID?: string;
      archivedAt?: string;
      notes?: string;
      name?: string;
      belongsToRecipeStep?: string;
      id?: string;
      minimumQuantity?: number;
      maximumQuantity?: number;
      optionIndex?: number;
      productOfRecipeStep?: boolean;
      preferenceRank?: number;
      optional?: boolean;
    } = {},
  ) {
    this.createdAt = input.createdAt ?? '1970-01-01T00:00:00Z';
    this.instrument = input.instrument ?? new ValidInstrument();
    this.lastUpdatedAt = input.lastUpdatedAt;
    this.recipeStepProductID = input.recipeStepProductID;
    this.archivedAt = input.archivedAt;
    this.notes = input.notes ?? '';
    this.name = input.name ?? '';
    this.belongsToRecipeStep = input.belongsToRecipeStep ?? '';
    this.id = input.id ?? '';
    this.minimumQuantity = input.minimumQuantity ?? -1;
    this.maximumQuantity = input.maximumQuantity ?? -1;
    this.optionIndex = input.optionIndex ?? -1;
    this.productOfRecipeStep = input.productOfRecipeStep ?? false;
    this.preferenceRank = input.preferenceRank ?? -1;
    this.optional = input.optional ?? false;
  }
}

export interface IRecipeStepInstrumentCreationRequestInput {
  instrumentID?: string;
  recipeStepProductID?: string;
  name: NonNullable<string>;
  notes: NonNullable<string>;
  productOfRecipeStep: NonNullable<boolean>;
  preferenceRank: NonNullable<number>;
  optional: NonNullable<boolean>;
  optionIndex: NonNullable<number>;
  minimumQuantity: NonNullable<number>;
  maximumQuantity: NonNullable<number>;
}

export class RecipeStepInstrumentCreationRequestInput implements IRecipeStepInstrumentCreationRequestInput {
  instrumentID?: string;
  recipeStepProductID?: string;
  name: NonNullable<string> = '';
  notes: NonNullable<string> = '';
  productOfRecipeStep: NonNullable<boolean> = false;
  preferenceRank: NonNullable<number> = -1;
  optional: NonNullable<boolean> = false;
  optionIndex: NonNullable<number> = -1;
  minimumQuantity: NonNullable<number> = -1;
  maximumQuantity: NonNullable<number> = -1;

  constructor(
    input: {
      instrumentID?: string;
      recipeStepProductID?: string;
      name?: string;
      notes?: string;
      productOfRecipeStep?: boolean;
      preferenceRank?: number;
      optional?: boolean;
      optionIndex?: number;
      minimumQuantity?: number;
      maximumQuantity?: number;
    } = {},
  ) {
    this.instrumentID = input.instrumentID;
    this.recipeStepProductID = input.recipeStepProductID;
    this.name = input.name ?? '';
    this.notes = input.notes ?? '';
    this.productOfRecipeStep = input.productOfRecipeStep ?? false;
    this.preferenceRank = input.preferenceRank ?? -1;
    this.optional = input.optional ?? false;
    this.optionIndex = input.optionIndex ?? -1;
    this.minimumQuantity = input.minimumQuantity ?? -1;
    this.maximumQuantity = input.maximumQuantity ?? -1;
  }
}

export interface IRecipeStepInstrumentUpdateRequestInput {
  instrumentID?: string;
  recipeStepProductID?: string;
  productOfRecipeStep?: boolean;
  notes?: string;
  preferenceRank?: number;
  belongsToRecipeStep?: string;
  name?: string;
  optional?: boolean;
  optionIndex?: number;
  minimumQuantity?: number;
  maximumQuantity?: number;
}

export class RecipeStepInstrumentUpdateRequestInput implements IRecipeStepInstrumentUpdateRequestInput {
  instrumentID?: string;
  recipeStepProductID?: string;
  productOfRecipeStep?: boolean = false;
  notes?: string;
  preferenceRank?: number;
  belongsToRecipeStep?: string;
  name?: string;
  optional?: boolean = false;
  optionIndex?: number;
  minimumQuantity?: number;
  maximumQuantity?: number;

  constructor(
    input: {
      instrumentID?: string;
      recipeStepProductID?: string;
      productOfRecipeStep?: boolean;
      notes?: string;
      preferenceRank?: number;
      belongsToRecipeStep?: string;
      name?: string;
      optional?: boolean;
      optionIndex?: number;
      minimumQuantity?: number;
      maximumQuantity?: number;
    } = {},
  ) {
    this.instrumentID = input.instrumentID;
    this.recipeStepProductID = input.recipeStepProductID;
    this.productOfRecipeStep = input.productOfRecipeStep ?? false;
    this.notes = input.notes;
    this.preferenceRank = input.preferenceRank;
    this.belongsToRecipeStep = input.belongsToRecipeStep;
    this.name = input.name;
    this.optional = input.optional ?? false;
    this.optionIndex = input.optionIndex;
    this.minimumQuantity = input.minimumQuantity;
    this.maximumQuantity = input.maximumQuantity;
  }
}
